{"version":3,"sources":["components/Card/index.js","components/Game/index.js","App.js","index.js"],"names":["Card","props","className","onClick","clickedPic","id","alt","name","src","image","Game","score","highScore","win","lose","shuffle","array","i","j","temp","length","Math","floor","random","App","state","pictures","clickedCat","game","setState","undefined","push","includes","this","map","picture","key","Component","ReactDOM","render","document","getElementById"],"mappings":"qgCAeeA,MAXf,SAAcC,GACV,OACI,yBAAKC,UAAU,8BAA8BC,QAAS,kBAAMF,EAAMG,WAAWH,EAAMI,MAC/E,yBAAKH,UAAU,kBACX,yBAAKI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,WCIlCC,MAVf,SAAcT,GACV,OACI,yBAAKC,UAAU,sDACX,wBAAIA,UAAU,yBAAd,WAA+CD,EAAMU,MAArD,KACA,wBAAIT,UAAU,yBAAd,gBAAoDD,EAAMW,UAA1D,KACA,wBAAIV,UAAU,yBAAd,SAA6CD,EAAMY,IAAnD,KACA,wBAAIX,UAAU,yBAAd,UAA8CD,EAAMa,KAApD,O,OCyFZ,SAASC,EAAQC,GACb,IAAIC,EACAC,EACAC,EACJ,IAAKF,EAAID,EAAMI,OAAS,EAAGH,EAAI,EAAGA,IAC9BC,EAAIG,KAAKC,MAAMD,KAAKE,UAAYN,EAAI,IACpCE,EAAOH,EAAMC,GACbD,EAAMC,GAAKD,EAAME,GACjBF,EAAME,GAAKC,EAEf,OAAOH,EAGIQ,M,4MAvGXC,MAAQ,CACJC,WACAC,WAAY,GACZhB,MAAO,EACPC,UAAW,EACXC,IAAK,EACLC,KAAM,EACNc,MAAM,G,EAGVxB,WAAa,SAACC,GACV,IAAIsB,EAAa,EAAKF,MAAME,WAExBhB,EAAQ,EAAKc,MAAMd,MACnBC,EAAY,EAAKa,MAAMb,UAEvBC,EAAM,EAAKY,MAAMZ,IACjBC,EAAO,EAAKW,MAAMX,KAEtB,EAAKe,SAAS,CACVD,MAAM,SAGSE,IAAfH,GAAkD,IAAtBA,EAAWP,QACvCO,EAAWI,KAAK1B,GAChB,EAAKwB,SAAS,CACVlB,MAAOA,EAAQ,EACfe,SAAUX,EAAQW,MAIO,KAAtBC,EAAWP,OAClB,EAAKS,SAAS,CACVhB,IAAKA,EAAM,EACXF,MAAO,EACPC,UAAW,GACXe,WAAY,GACZD,SAAUX,EAAQW,KAGfC,EAAWK,SAAS3B,IAE3B,EAAKwB,SAAS,CACVf,KAAMA,EAAO,EACbH,MAAO,EACPgB,WAAY,GACZD,SAAUX,EAAQW,KAElBf,EAAQC,GACR,EAAKiB,SAAS,CACVjB,UAAWD,EACXA,MAAO,MAKf,EAAKkB,SAAS,CACVlB,MAAOA,EAAQ,EACfe,SAAUX,EAAQW,KAEtBC,EAAWI,KAAK1B,K,uDAKd,IAAD,OACL,OACI,yBAAKH,UAAU,qBACX,kBAAC,EAAD,CACIS,MAAOsB,KAAKR,MAAMd,MAClBC,UAAWqB,KAAKR,MAAMb,UACtBC,IAAKoB,KAAKR,MAAMZ,IAChBC,KAAMmB,KAAKR,MAAMX,OAErB,yBAAKZ,UAAU,eACV+B,KAAKR,MAAMC,SAASQ,KAAI,SAACC,GAAD,OACrB,kBAAC,EAAD,CACI9B,GAAI8B,EAAQ9B,GACZ+B,IAAKD,EAAQ9B,GACbE,KAAM4B,EAAQ5B,KACdE,MAAO0B,EAAQ1B,MACfL,WAAY,EAAKA,sB,GAnF3BiC,a,MCAlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.fd5d426a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n\nfunction Card(props) {\n    return (\n        <div className=\"card bg-info rounded-circle\" onClick={() => props.clickedPic(props.id)}>\n            <div className=\"img-container \">\n                <img alt={props.name} src={props.image} />\n            </div>\n            \n        </div>\n    );\n}\n\nexport default Card;\n","import React from \"react\";\n\nfunction Game(props){\n    return ( \n        <div className=\"nav justify-content-center text-light py-4 bg-info\">\n            <h4 className=\"nav-item px-4 bg-info\"> Score: {props.score} </h4>\n            <h4 className=\"nav-item px-4 bg-info\"> High Score: {props.highScore} </h4>\n            <h4 className=\"nav-item px-4 bg-info\"> Win: {props.win} </h4>\n            <h4 className=\"nav-item px-4 bg-info\"> Lose: {props.lose} </h4>\n        </div>\n    )\n}\nexport default Game;","import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Game from \"./components/Game\";\nimport pictures from \"./pictures.json\";\n\nclass App extends Component {\n    // Setting this.state.pictures to the pictures json array\n    state = {\n        pictures,\n        clickedCat: [],\n        score: 0,\n        highScore: 0,\n        win: 0,\n        lose: 0,\n        game: false,\n    };\n\n    clickedPic = (id) => {\n        let clickedCat = this.state.clickedCat;\n\n        let score = this.state.score;\n        let highScore = this.state.highScore;\n\n        let win = this.state.win;\n        let lose = this.state.lose;\n\n        this.setState({\n            game: true,\n        });\n\n        if (clickedCat === undefined || clickedCat.length === 0) {\n            clickedCat.push(id);\n            this.setState({\n                score: score + 1,\n                pictures: shuffle(pictures)\n            });\n            //add one to score\n            //randomize the images\n        } else if (clickedCat.length === 12) {\n            this.setState({\n                win: win + 1,\n                score: 0,\n                highScore: 12,\n                clickedCat: [],\n                pictures: shuffle(pictures)\n            });\n            //restart game, score set to 0 and clear clicked Cat array\n        } else if (clickedCat.includes(id)) {\n            //check if img has been clicked before\n            this.setState({\n                lose: lose + 1,\n                score: 0,\n                clickedCat: [],\n                pictures: shuffle(pictures)\n            });\n            if (score > highScore) {\n                this.setState({\n                    highScore: score,\n                    score: 0\n                });\n            }\n            //restart game, score set to 0 and clear clickedCat array\n        } else {\n            this.setState({\n                score: score + 1,\n                pictures: shuffle(pictures)\n            });\n            clickedCat.push(id);\n            //randomize pictures\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"container bg-info\">\n                <Game\n                    score={this.state.score}\n                    highScore={this.state.highScore}\n                    win={this.state.win}\n                    lose={this.state.lose}\n                />\n                <div className=\"row bg-info\">\n                    {this.state.pictures.map((picture) => (\n                        <Card\n                            id={picture.id}\n                            key={picture.id}\n                            name={picture.name}\n                            image={picture.image}\n                            clickedPic={this.clickedPic}\n                        />\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction shuffle(array) {\n    let i;\n    let j;\n    let temp;\n    for (i = array.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n    return array;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}